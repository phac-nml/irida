#####################################################################
# Integration test suite definition for IRIDA using GitHub Actions
#####################################################################

name: Integration Tests

on:
  pull_request: # Run on all pull requests
  push:
    branches: # Run on any push to development or master
      - development
      - master
  schedule: # Run daily on development and weekly on master
    - cron: 0 1 * * *
      branches: development
    - cron: 0 2 * * 0
      branches: master

jobs:
  maven-build: # Maven integration tests
    runs-on: ubuntu-20.04 #See pre-installed software at https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
    env:
      MYSQL_PORT: 3800
      MYSQL_USER: test
      MYSQL_PASSWORD: test
      MYSQL_DATABASE: irida_integration_test
      MYSQL_HOST: 127.0.0.1

    strategy:
      fail-fast: false  #Setting so that if one of the test suites fail, the other will continue
      matrix:
        #The list of test suites to run
        suite: [ 'service_testing', 'rest_testing', 'ui_testing', 'galaxy_testing', 'galaxy_pipeline_testing', 'open_api_testing' ]

    steps:
      - uses: actions/checkout@v2 #Checkout the project from git
      - name: Cache Maven dependencies #Pull the cache for Maven.  This caches all dependencies assuming the pom file is the same
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ matrix.suite }}-${{ hashFiles('**/pom.xml') }}
      - name: Cache PNP  #Pull the Yarn cache for PNP (package management strategy - see https://classic.yarnpkg.com/en/docs/pnp).  This caches all dependencies assuming the yarn.lock file stays the same
        uses: actions/cache@v2
        with:
          path: '**/.pnp.js'
          key: ${{ runner.os }}-pnp-${{ hashFiles('**/yarn.lock') }}
      - name: Cache yarn  #Pull the cache for yarn.  This caches all dependencies assuming the yarn.lock file stays the same
        uses: actions/cache@v2
        with:
          path: '**/.yarn'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - uses: mirromutth/mysql-action@v1.1
        with:
          host port: ${{ env.MYSQL_PORT }}
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql version: '5.7'
          mysql database: ${{ env.MYSQL_DATABASE }}
          mysql user: ${{ env.MYSQL_USER }}
          mysql password: ${{ env.MYSQL_PASSWORD }}
      - name: Set up JDK 11 # Installs java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Install libraries # Install our non-maven backed dependencies
        run: pushd lib; ./install-libs.sh; popd
      - name: Run tests with Maven # Run the test suite
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
        run: ./run-tests.sh --db-host ${{ env.MYSQL_HOST }} --db-port ${{ env.MYSQL_PORT }} --database ${{ env.MYSQL_DATABASE}} ${{ matrix.suite }}

  docs-build: # Testing the javadoc and jekyll documentation builds
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2 #Checkout the project from git
      - name: Cache Maven dependencies #Pull the cache for Maven.  This caches all dependencies assuming the pom file is the same
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-doc_testing-${{ hashFiles('**/pom.xml') }}
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.7'
      - name: Set up JDK 11 # Installs java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Install Java libraries
        run: pushd lib; ./install-libs.sh; popd;
      - name: Install doc libraries
        run: pushd doc; bundle install; popd
      - name: Build Javadoc
        run: mvn clean site
      - name: Build Jekyll Site
        run: pushd doc; bundle exec jekyll build;
